<?php

namespace App\Forms;

use Kris\LaravelFormBuilder\Form;

class ListForm extends Form
{
	public function buildForm()
	{
		$this->name();
		$this->key();
		$this->customFields();
		$this->overwrites();
		$this->active();
	}

	private function name()
	{
		$this->add('name', 'text');
	}

	private function key()
	{
		$this->add('key', 'text', [
			'label'      => 'Key',
			'help_block' => [
				'text' => 'Used to uniquely identify multiple lists generated by the same field-list template. (not required if field-list is a wrapper for multiple constants like Settings)',
			],
			'attr'       => [
				'id'           => 'key',
				'spellcheck'   => 'off',
				'autocomplete' => 'off',
			],
		]);
	}

	private function overwrites()
	{
		$this->add('overwrites', 'checkbox', [
			'label'      => 'Overwrites Conflicting Lists',
			'help_block' => [
				'text' => 'If checked, when building the rendering config, if a list already exists with the same key (a higher priority one), this list will completely overwrite the older list. If not checked, the config builder will merge each constant inside the list, replacing only constants with conflicting keys and keeping constants from the older list.',
			],
		]);
	}

	private function active()
	{
		if (!$this->getModel()) {
			$opts = [
				'checked' => true,
			];
		} else {
			$opts = [];
		}

		$opts = $opts + [
				'label'      => 'Active',
				'rules'      => ['required'],
				'help_block' => [
					'text' => 'If this list is active to be used for plugin rendering.',
				],
			];

		$this->add('active', 'checkbox', $opts ?? []);
	}

	private function customFields()
	{
		$customFields = $this->getData('customFields', []);

		foreach ($customFields as $field) {
			$this->add($field->key, 'text', [
				'label' => $field->name,
				'attr'  => [
					'placeholder' => $field->default,
				],
			]);
		}
	}
}
